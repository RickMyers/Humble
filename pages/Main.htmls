<!--#include virtual="/pages/includes/header.html"--><!--#include virtual="/pages/includes/banner.html"--><!--#include virtual="/pages/includes/container.html"-->
<style type="text/css">
    .humble-dmz {
        clear: both; height: 25px
    }
    .feature {
        display: inline-block; padding: 5px; position: relative
    }
    .feature-title {
        font-weight: bolder; font-family: sans-serif; font-size: 1.3em; margin-bottom: 15px; 
    }
    .feature-text {
        font-family: sans-serif; text-align: justify; width: 65%; margin-right: .2%
    }
    .feature-slides {
       overflow: hidden; vertical-align: top; text-align: center; width: 34%; margin-right: .2%
    }
    .learn-more-link {
        margin-top: 15px; letter-spacing: 1.5px; font-weight: bolder; clear: both
    }
</style>
<script>
    console.log('SSI Check');
    console.log('<!--#config timefmt="%c" --><!--#echo var="DATE_LOCAL" -->');
    var Main = (function () {
        var timer = null;
        var roll  = -1;
        var features = [{
                "container": '#feature-slides-1',
                "slide": "#feature-slide-1",
                "current": -1,
                "timing": 15,
                "video": "",
                "slides": [
                    "/pages/images/MVC.png",
                    "/pages/images/mvc_architecture.png"
                ]
            },
            {
                "container": '#feature-slides-2',
                "slide": "#feature-slide-2",
                "current": -1,
                "timing": 15,
                "video": "",
                "slides": [
                    "/pages/images/workflow.png"
                ]
            },
            {
                "container": '#feature-slides-3',
                "slide": "#feature-slide-3",
                "current": -1,
                "timing": 15,
                "video": "",
                "slides": [
                    "/pages/images/polyglot_orm.png"
                ]
            },
            {
                "container": '#feature-slides-4',
                "slide": "#feature-slide-4",
                "current": -1,
                "video": "",
                "timing": 15,
                "slides": [
                    "/pages/images/integration.png"
                ]
            },
            {
                "container": '#feature-slides-5',
                "slide": "#feature-slide-5",
                "current": -1,
                "timing": 15,
                "slides": [
                    "/pages/images/micro_services.png"
                ]
            }
        ];
        function RollSlides() {
            roll    = (++roll >= features.length) ? 0 : roll;
            var me  = this;
            var feature = features[roll];
            $(feature.slide).attr('src',feature.slides[0]);
            timer   = window.setTimeout(function () {
                RollSlides.apply(me);
            },2000);
        }        
        return {
            prime: function () {
                return function () {
                    $('.feature-slides').height(($('.feature-slides').width()-100)*.75);
                    for (topic in features) {
                        let feature = features[topic];
                        $(features[topic].slide).on('load',function () {
                            var slide_w = $(feature.slide).width();
                            var con_w   = $(feature.container).width();
                            slide_w = (slide_w > con_w) ? con_w : slide_w;
                            $(feature.slide).css('left',(con_w - slide_w)/2);
                            $(feature.slide).css('top',0);
                        });
                    }
                    for (topic in features) {
                        $(features[topic].slide).attr('src',features[topic].slides[0])
                    }
                    RollSlides.apply(this);
                }
            },
            video: function (whichOne) {
                $('#humble_video_layer').css('display','block');
                $('#humble_video_player').attr('src',features[whichOne].video);
            }
        }
    })();
    $(document).ready(Main.prime());
</script>
<div style="text-align: center">

    <div style="display: inline-block; border: 1px double #333; padding: 0px 20px">
        Version: <!--#include virtual="/version.php" -->
    </div>
    <div style="font-size: 1.1em; display: inline-block; vertical-align: top;  margin-left: 30px">
        A <a style="color: blue" target="_BLANK" href="/pages/VideoSeries.htmls">Video Series</a> Is In The Works!
    </div>    
</div>
<div style=" font-size: 2em; font-family: sans-serif; font-weight: bold; color: rgba(50,50,50,.8)">
    <div style="float: right; margin-right: 5px; font-size: .5em">(<a href="/pages/Concepts.htmls">Simplified...</a>)</div>It Is Good To Be Humble...
</div>
<div style="padding: 20px 0px; font-size: 1em; text-align: justify; font-family: sans-serif;">
    The Humble Framework is all about easy application development, robust flexibility, and maintainability.  It is a framework that from the start was designed to actually fight Software Entropy, and that means lower cost
    of maintenance and enhancements down the road.  But speed of application development doesn't mean that Humble sacrifices speed of execution... quite the opposite!  From its outset, Humble has been
    designed to scale in breadth (services) and not depth (monolithic), and this has allowed Humble to evolve and shine in the realm of MicroService Architecture Application development.  On top of that, with a high
    degree of abstraction, support for modern JavasScript frameworks like React and Vue, while also supporting a host of server-side rendering languages like Smarty, Twig, Mustache, etc... whatever your needs are, it is likely
    that Humble can fill them.<br /><br />
    Some Key Features of Humble...
</div>

<div class="feature-row">
    <div class="feature feature-text">
        <div class="feature-title">
            MVC
        </div>
        Humble is a Model-View-Controller framework where the Controllers are XML files, the Models can be written in PHP or implied (more on that later), and for the Views,
        there is support for modern JavaScript libraries (i.e. Angular, React, or Vue) or server side rendering using any templating library you'd like (i.e. Twig, Smarty, Mustache, etc...)<br />
        <div class="learn-more-link"><a href="#" onclick="Main.video(0); return false">Learn More Here...</a></div>
    </div>
    <div class="feature feature-slides" id="feature-slides-1">
        <img id='feature-slide-1' src="" style="height:100%; position: absolute;" />
    </div>
</div>

<div class='humble-dmz'></div>

<div class="feature-row">
    <div class="feature feature-slides" id="feature-slides-2">
        <img id='feature-slide-2' src="" style="height:100%; position: absolute;" />
    </div>
    <div class="feature feature-text">
        <div class="feature-title">
            Design More, Write Less
        </div>
        At its heart, Humble uses an Event-Driven model that can trigger graphically designed workflows.  These workflows are composed of model objects that are cataloged and categorized as developers build them, creating a "Lego" style architecture.
        Events can be User driven (such as form submission), Time/Date events for recurring daily, weekly, or monthly processes, or system events such as the arrival of files or other autonomous event.
        <div class="learn-more-link">
            <a href="#" onclick="Main.video(1); return false">Learn More Here...</a>
        </div>
    </div>
</div>

<div class='humble-dmz'></div>

<div class="feature-row">
    <div class="feature feature-text">
        <div class="feature-title">
            Polyglot ORM
        </div>
        Humble uses the Unity Polyglot ORM, which combines the functionality of MySQL and MongoDB.  This combination makes it easy to add columns on the fly, store hierarchical data alongside traditional 
        schema based entities, keep the concept of Normalization and Joins while leveraging "Big-Data" features, and solves problems elegantly that used to require obtuse approaches like EAV (Entity-Attribute-Value). 
        <div class="learn-more-link"><a href="#" onclick="Main.video(2); return false">Learn More Here...</a></div>
    </div>
    <div class="feature feature-slides" id="feature-slides-3">
        <img id='feature-slide-3' src="" style="height:100%; position: absolute;" />
    </div>
</div>

<div class='humble-dmz'></div>

<div class="feature-row">
    <div class="feature feature-slides" id="feature-slides-4">
        <img id='feature-slide-4' src="" style="height:100%; position: absolute;" />
    </div>
    <div class="feature feature-text">
        <div class="feature-title">
            Integration Abstraction
        </div>
        For the last 20 years, for an application to be "Enterprise" class it had to be able to integrate, both as a Producer and a Consumer, with external sources of functionality and data.
        Gone are the days of the "One-Big-App".  Humble makes integration a feature of configuration, not coding, by abstracting Integration Points using YaML files to define the features of those
        Integration Points.  Also, through the Paradigm Engine Workflow Editor, you can easily create an ESB (Enterprise Service Bus) that can broker the data you wish to share with others.  Integration
        is integral to today's connected world, and is at the heart of the Humble framework.
        <div class="learn-more-link"><a href="#" onclick="Main.video(3); return false">Learn More Here...</a></div>
    </div>
</div>

<div class='humble-dmz'></div>

<div class="feature-row">
    <div class="feature feature-text">
        <div class="feature-title">
            Easy Transition from Monolith to MicroService Architecture
        </div>
        Develop your application as a monolith but when you are ready for production, you can deploy it as a multi-server MicroService Architecture (MSA) application, with no specialized coding required.
        Because Humble uses exceptionally "clean" URIs, the namespace component of each URI can be mapped to a dedicated server to handle all requests specific to that namespace.  Then all we need
        to do is to designate one of the server "nodes" to be the MSA Router, and we can leverage the scalability and reliability that is native to MSA applications.  This phase of development/deployment
        is referred to as "MicroService Mode", but it is so simple to effect that it might as well be called "Magic Mode".
        <div class="learn-more-link"><a href="#" onclick="Main.video(4); return false">Learn More Here...</a></div>
    </div>
    <div class="feature feature-slides" id="feature-slides-5">
        
    </div>
    
    <iframe style="width: 100%; height: 680px" src="https://www.youtube.com/embed/Iko4gMUMZT0?si=DtUglHFqZl5-27UA" title="YouTube video player" frameborder="0" 
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe> <br /><br /><br /><br />   
</div>

<div class='humble-dmz'></div>

<!--#include virtual="/pages/includes/footer.html" -->