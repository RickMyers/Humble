<!--#include virtual="/pages/includes/header.html" -->
<!--#include virtual="/pages/includes/container.html" -->
<table style="width: 80%; margin-left: auto; margin-right: auto">
    <tr>
        <td><a href="#" onclick="window.history.back()">Back</a></td>
        <td style="text-align: center"><a href="/pages/Main.htmls">Home</a></td>
        <td style="text-align: right"><a href="Configuration.htmls" title="Module Configuration" >Next</a></td>
    </tr>
</table>
<div style='width: 80%; margin-left: auto; margin-right: auto; text-align: justify'>
<div class='humble-topic-header'>Framework In A Nutshell</div>

Humble is a modular framework where custom modules are contained in packages. These packages are nothing more than directories/folders off of the application root and each application has one-to-many packages containing one-to-many modules.
Each Module contains components, and these components are broken down into <i>Controllers</i> (XML Files), <i>Models</i> (Business Logic), <i>Entities</i> (Represent Tables/Collections), <i>Helpers</i> (Utility Classes), <i>Views</i> (Output Renderers), and <i>Web Elements</i> (JavaScript files, CSS, images, etc).
<br /><br />
Each Module has its own configuration file, and each Module lays claim to its own unique namespace. All elements within the Module are referenced using this namespace and appropriate Factory method or URI.
<br /><br />
<div class="humble-section-header">Framework File Structure</div>
    <table width='100%'>
        <tr class='humble-zebra-0'>
            <td class='humble-monospace' width='25%'>/</td>
            <td class=''>App base directory, APIs, unreachable by anything not covered by the .htaccess file</td>
        </tr>
        <tr class='humble-zebra-1'>
            <td class='humble-monospace' width='25%'>/app/</td>
            <td class='humble-sans-serif'>Application root directory, core application factories and key files are located here</td>
        </tr>
        <tr class='humble-zebra-0'>
            <td class='humble-monospace' width='25%'>/app/Code/Base/</td>
            <td class='humble-sans-serif'>The core framework files and classes.  Don't hack on core if that's not your job</td>
        </tr>
        <tr class='humble-zebra-1'>
            <td class='humble-monospace' width='25%'>/app/Code/<i>packages</i></td>
            <td class='humble-sans-serif'>Your custom package (directory) that contains your custom modules</td>
        </tr>
        <tr class='humble-zebra-0'>
            <td class='humble-monospace' width='25%'>/app/Code/<i>package</i>/<i>modules</i></td>
            <td class='humble-sans-serif'>Your custom modules that make up your application</td>
        </tr>
    </table>
<br /><br />
<div class="humble-section-header">Framework Components</div>
In the /app/ directory are some key files to the framework, and most are what we call "<a href="https://en.wikipedia.org/wiki/Factory_method_pattern" target="_BLANK">Static Factories</a>".
Other than the <a href="Factories.htmls#Environment">Environment</a> and  <a href="Factories.htmls#Log">Log</a> factory, you will not in normal application development ever need to call these, as most of the files
here are for internal use.  There is a centralized file for declaring constants (Enums), so feel free to add your custom constants to the Constants.php file found here.<br /><br />
    <table width='100%'>
        <tr class='humble-zebra-0'>
            <td class='humble-monospace' width='25%'>/app/Humble.php</td>
            <td class='humble-sans-serif'>The main framework factory. Gets extended in the installation step to create a branded factory</td>
        </tr>
        <tr class='humble-zebra-1'>
            <td class='humble-monospace' width='25%'>/app/Module.php</td>
            <td class='humble-sans-serif'>Command Line Interface for the framework, see <a href="CLI.htmls">Command Line Interactions</a>.</td>
        </tr>
        <tr class='humble-zebra-0'>
            <td class='humble-monospace' width='25%'>/app/Environment.php</td>
            <td class='humble-sans-serif'>Factory, returns information about the current run environment</td>
        </tr>
        <tr class='humble-zebra-1'>
            <td class='humble-monospace' width='25%'>/app/Log.php</td>
            <td class='humble-sans-serif'>Application logger, can write logs to many places</td>
        </tr>
        <tr class='humble-zebra-0'>
            <td class='humble-monospace' width='25%'>/app/Event.php</td>
            <td class='humble-sans-serif'>Internal Factory, manages Event instantiation and propagation</td>
        </tr>
        <tr class='humble-zebra-1'>
            <td class='humble-monospace' width='25%'>/app/Trigger.php</td>
            <td class='humble-sans-serif'>Internal Factory, used to trigger events</td>
        </tr>
        <tr class='humble-zebra-0'>
            <td class='humble-monospace' width='25%'>/app/Constants.php</td>
            <td class='humble-sans-serif'>Can define your constants (ENUM) here</td>
        </tr>
        <tr class='humble-zebra-1'>
            <td class='humble-monospace' width='25%'>/app/Scheduler.php</td>
            <td class='humble-sans-serif'>Internal, used to prep jobs to run at certain times of day</td>
        </tr>
        <tr class='humble-zebra-0'>
            <td class='humble-monospace' width='25%'>/app/Launcher.php</td>
            <td class='humble-sans-serif'>Internal, executes jobs that have been prepped by the Scheduler</td>
        </tr>
        <tr class='humble-zebra-1'>
            <td class='humble-monospace' width='25%'>/app/Singleton.php</td>
            <td class='humble-sans-serif'>Internal Factory, used to manage static variables that shouldn't be instantiated more than once</td>
        </tr>
        <tr class='humble-zebra-0'>
            <td class='humble-monospace' width='25%'>/app/allowed.json</td>
            <td class='humble-sans-serif'>Authorized list of routes that are reachable without authentication, see <a href="Routing.htmls#allowed">Routing, Allowed Overrides</a>.</td>
        </tr>
    </table>
<br /><br />
<div class="humble-section-header">Module File Structure</div>
Each module is composed of directories where each directory represents some degree of functionality.  Since Humble is a solidly MVC (Model-View-Controller) framework, we have directories with those very names.
We also have 'Entities', which are DAO (Database Access Objects) containing custom queries and functionality outside of the basic CRUD (Create-Read-Update-Delete) functionality that is implicit, and 'Helpers' which
are utility classes.  The 'Images' directory holds images that are specific to the module, and the 'Schema' directory is broken down into two sub-directories: 'Install' and  'Update'.  Any SQL placed in the 'Install'
folder will be run during the initial install, and any SQL placed in the 'Update' folder will be run on the next update if the timestamp for the file is greater than the last update run.  Finally we have the 'etc' folder
which contains the application configuration file, 'RPC' (Remote Procedure Calls) which defines our "Smart Endpoints", and the 'web' folder that contains web components like JavaScript and CSS.<br /><br />
    <table width='100%'>
        <tr class='humble-zebra-0'>
            <td class='humble-monospace' width='25%'>/Controllers</td>
            <td class='humble-sans-serif'>XML Controllers, see <i>Anatomy of a Controller</i></td>
        </tr>
        <tr class='humble-zebra-1'>
            <td class='humble-monospace' width='25%'>/Entities</td>
            <td class='humble-sans-serif'>Database Access Objects named the same as the table to access</td>
        </tr>
        <tr class='humble-zebra-0'>
            <td class='humble-monospace' width='25%'>/Helpers</td>
            <td class='humble-sans-serif'>Assorted helper classes</td>
        </tr>
        <tr class='humble-zebra-1'>
            <td class='humble-monospace' width='25%'>/Images</td>
            <td class='humble-sans-serif'>Module Images (see <i><a href="Routing.htmls#LoadingResources">Loading Resources</a></i>)</td>
        </tr>
        <tr class='humble-zebra-0'>
            <td class='humble-monospace' width='25%'>/Models</td>
            <td class='humble-sans-serif'>Business logic and workflow "Lego" components</td>
        </tr>
        <tr class='humble-zebra-1'>
            <td class='humble-monospace' width='25%'>/RPC/mapping.yaml</td>
            <td class='humble-sans-serif'>Defines "Smart Endpoints" for integration (see <i><a href="Integration.htmls">Integration</a></i>)</td>
        </tr>
        <tr class='humble-zebra-0'>
            <td class='humble-monospace' width='25%'>/Schema</td>
            <td class='humble-sans-serif'>SQL used during module installs and updates</td>
        </tr>
        <tr class='humble-zebra-1'>
            <td class='humble-monospace' width='25%'>/Views/<i>renderer</i></td>
            <td class='humble-sans-serif'>Server side rendering views in a variety of templating languages</td>
        </tr>
        <tr class='humble-zebra-0'>
            <td class='humble-monospace' width='25%'>/etc/config.xml</td>
            <td class='humble-sans-serif'>Module configuration file (see <i><a href="Configuration.htmls">Configuration</a></i>)</td>
        </tr>
        <tr class='humble-zebra-1'>
            <td class='humble-monospace' width='25%'>/web/app</td>
            <td class='humble-sans-serif'>Client-side JS templates (see <i>Decoupled UI</i>)</td>
        </tr>
        <tr class='humble-zebra-0'>
            <td class='humble-monospace' width='25%'>/web/css</td>
            <td class='humble-sans-serif'>Static CSS files (see <i><a href="Routing.htmls#LoadingResources">Loading Resources</a></i>)</td>
        </tr>
        <tr class='humble-zebra-1'>
            <td class='humble-monospace' width='25%'>/web/edits</td>
            <td class='humble-sans-serif'>Form validation, possibly deprecated feature</td>
        </tr>
        <tr class='humble-zebra-0'>
            <td class='humble-monospace' width='25%'>/web/js</td>
            <td class='humble-sans-serif'>Static JavaScript files (see <i><a href="Routing.htmls#LoadingResources">Loading Resources</a></i>)</td>
        </tr>
    </table>
<div class="humble-section-header"></div>
</div>

<!--#include virtual="/pages/includes/footer.html" -->
